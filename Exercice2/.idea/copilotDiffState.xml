<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/ma/projet/util/HibernateUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ma/projet/util/HibernateUtil.java" />
              <option name="originalContent" value="package ma.projet.util;&#10;&#10;import org.springframework.jdbc.datasource.DriverManagerDataSource;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.ComponentScan;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.context.annotation.PropertySource;&#10;import org.springframework.core.env.Environment;&#10;import org.springframework.orm.jpa.JpaTransactionManager;&#10;import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;&#10;import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;&#10;import org.springframework.transaction.annotation.EnableTransactionManagement;&#10;&#10;import jakarta.persistence.EntityManagerFactory;&#10;import javax.sql.DataSource;&#10;import java.util.Properties;&#10;&#10;@Configuration&#10;@EnableTransactionManagement&#10;@ComponentScan(basePackages = &quot;ma.projet&quot;)&#10;@PropertySource(&quot;classpath:application.properties&quot;)&#10;public class HibernateUtil {&#10;&#10;    @Autowired&#10;    private Environment env;&#10;&#10;    @Bean&#10;    public DataSource dataSource() {&#10;        DriverManagerDataSource ds = new DriverManagerDataSource();&#10;        ds.setDriverClassName(env.getRequiredProperty(&quot;hibernate.connection.driver_class&quot;));&#10;        ds.setUrl(env.getRequiredProperty(&quot;hibernate.connection.url&quot;));&#10;        ds.setUsername(env.getRequiredProperty(&quot;hibernate.connection.username&quot;));&#10;        ds.setPassword(env.getRequiredProperty(&quot;hibernate.connection.password&quot;));&#10;        return ds;&#10;    }&#10;&#10;    @Bean&#10;    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {&#10;        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();&#10;        em.setDataSource(dataSource());&#10;        em.setPackagesToScan(&quot;ma.projet.classes&quot;);&#10;&#10;        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();&#10;        em.setJpaVendorAdapter(vendorAdapter);&#10;        em.setJpaProperties(hibernateProperties());&#10;&#10;        return em;&#10;    }&#10;&#10;    @Bean&#10;    public JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {&#10;        JpaTransactionManager transactionManager = new JpaTransactionManager();&#10;        transactionManager.setEntityManagerFactory(entityManagerFactory);&#10;        return transactionManager;&#10;    }&#10;&#10;    private Properties hibernateProperties() {&#10;        Properties properties = new Properties();&#10;        properties.put(&quot;hibernate.dialect&quot;, env.getProperty(&quot;hibernate.dialect&quot;));&#10;        properties.put(&quot;hibernate.show_sql&quot;, env.getProperty(&quot;hibernate.show_sql&quot;));&#10;        properties.put(&quot;hibernate.format_sql&quot;, env.getProperty(&quot;hibernate.format_sql&quot;));&#10;        properties.put(&quot;hibernate.hbm2ddl.auto&quot;, env.getProperty(&quot;hibernate.hbm2ddl.auto&quot;));&#10;        return properties;&#10;    }&#10;}" />
              <option name="updatedContent" value="package ma.projet.util;&#10;&#10;import org.springframework.jdbc.datasource.DriverManagerDataSource;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.ComponentScan;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.context.annotation.PropertySource;&#10;import org.springframework.core.env.Environment;&#10;import org.springframework.orm.jpa.JpaTransactionManager;&#10;import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;&#10;import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;&#10;import org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor;&#10;import org.springframework.transaction.annotation.EnableTransactionManagement;&#10;&#10;import jakarta.persistence.EntityManagerFactory;&#10;import javax.sql.DataSource;&#10;import java.util.Properties;&#10;&#10;@Configuration&#10;@EnableTransactionManagement&#10;@ComponentScan(basePackages = {&quot;ma.projet.service&quot;})&#10;@PropertySource(&quot;classpath:application.properties&quot;)&#10;public class HibernateUtil {&#10;&#10;    @Autowired&#10;    private Environment env;&#10;&#10;    @Bean&#10;    public DataSource dataSource() {&#10;        DriverManagerDataSource ds = new DriverManagerDataSource();&#10;        ds.setDriverClassName(env.getRequiredProperty(&quot;hibernate.connection.driver_class&quot;));&#10;        ds.setUrl(env.getRequiredProperty(&quot;hibernate.connection.url&quot;));&#10;        ds.setUsername(env.getRequiredProperty(&quot;hibernate.connection.username&quot;));&#10;        ds.setPassword(env.getRequiredProperty(&quot;hibernate.connection.password&quot;));&#10;        return ds;&#10;    }&#10;&#10;    @Bean&#10;    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {&#10;        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();&#10;        em.setDataSource(dataSource());&#10;        em.setPackagesToScan(&quot;ma.projet.classes&quot;);&#10;&#10;        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();&#10;        em.setJpaVendorAdapter(vendorAdapter);&#10;        em.setJpaProperties(hibernateProperties());&#10;&#10;        return em;&#10;    }&#10;&#10;    @Bean&#10;    public JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {&#10;        JpaTransactionManager transactionManager = new JpaTransactionManager();&#10;        transactionManager.setEntityManagerFactory(entityManagerFactory);&#10;        return transactionManager;&#10;    }&#10;&#10;    @Bean&#10;    public PersistenceAnnotationBeanPostProcessor persistenceAnnotationBeanPostProcessor() {&#10;        return new PersistenceAnnotationBeanPostProcessor();&#10;    }&#10;&#10;    private Properties hibernateProperties() {&#10;        Properties properties = new Properties();&#10;        properties.put(&quot;hibernate.dialect&quot;, env.getProperty(&quot;hibernate.dialect&quot;));&#10;        properties.put(&quot;hibernate.show_sql&quot;, env.getProperty(&quot;hibernate.show_sql&quot;));&#10;        properties.put(&quot;hibernate.format_sql&quot;, env.getProperty(&quot;hibernate.format_sql&quot;));&#10;        properties.put(&quot;hibernate.hbm2ddl.auto&quot;, env.getProperty(&quot;hibernate.hbm2ddl.auto&quot;));&#10;        return properties;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>